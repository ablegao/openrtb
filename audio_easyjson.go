// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson48f1e884DecodeGithubComAblegaoOpenrtb(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Mimes = append(out.Mimes, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minduration":
			out.MinDuration = int(in.Int())
		case "maxduration":
			out.MaxDuration = int(in.Int())
		case "protocols":
			if in.IsNull() {
				in.Skip()
				out.Protocols = nil
			} else {
				in.Delim('[')
				if out.Protocols == nil {
					if !in.IsDelim(']') {
						out.Protocols = make([]int, 0, 8)
					} else {
						out.Protocols = []int{}
					}
				} else {
					out.Protocols = (out.Protocols)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.Protocols = append(out.Protocols, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "startdelay":
			out.StartDelay = int(in.Int())
		case "sequence":
			out.Sequence = int(in.Int())
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]int, 0, 8)
					} else {
						out.BAttr = []int{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.BAttr = append(out.BAttr, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxextended":
			out.MaxExtended = int(in.Int())
		case "minbitrate":
			out.MinBitrate = int(in.Int())
		case "maxbitrate":
			out.MaxBitrate = int(in.Int())
		case "delivery":
			if in.IsNull() {
				in.Skip()
				out.Delivery = nil
			} else {
				in.Delim('[')
				if out.Delivery == nil {
					if !in.IsDelim(']') {
						out.Delivery = make([]int, 0, 8)
					} else {
						out.Delivery = []int{}
					}
				} else {
					out.Delivery = (out.Delivery)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.Delivery = append(out.Delivery, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companionad":
			if in.IsNull() {
				in.Skip()
				out.CompanionAd = nil
			} else {
				in.Delim('[')
				if out.CompanionAd == nil {
					if !in.IsDelim(']') {
						out.CompanionAd = make([]Banner, 0, 1)
					} else {
						out.CompanionAd = []Banner{}
					}
				} else {
					out.CompanionAd = (out.CompanionAd)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Banner
					easyjson48f1e884DecodeGithubComAblegaoOpenrtb1(in, &v5)
					out.CompanionAd = append(out.CompanionAd, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]int, 0, 8)
					} else {
						out.API = []int{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int
					v6 = int(in.Int())
					out.API = append(out.API, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "companiontype":
			if in.IsNull() {
				in.Skip()
				out.CompanionType = nil
			} else {
				in.Delim('[')
				if out.CompanionType == nil {
					if !in.IsDelim(']') {
						out.CompanionType = make([]int, 0, 8)
					} else {
						out.CompanionType = []int{}
					}
				} else {
					out.CompanionType = (out.CompanionType)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.CompanionType = append(out.CompanionType, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "maxseq":
			out.MaxSequence = int(in.Int())
		case "feed":
			out.Feed = int(in.Int())
		case "stitched":
			out.Stitched = int(in.Int())
		case "nvol":
			out.NVol = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48f1e884EncodeGithubComAblegaoOpenrtb(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mimes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Mimes {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	if in.MinDuration != 0 {
		const prefix string = ",\"minduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinDuration))
	}
	if in.MaxDuration != 0 {
		const prefix string = ",\"maxduration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxDuration))
	}
	if len(in.Protocols) != 0 {
		const prefix string = ",\"protocols\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Protocols {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v11))
			}
			out.RawByte(']')
		}
	}
	if in.StartDelay != 0 {
		const prefix string = ",\"startdelay\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.StartDelay))
	}
	if in.Sequence != 0 {
		const prefix string = ",\"sequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Sequence))
	}
	if len(in.BAttr) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.BAttr {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	if in.MaxExtended != 0 {
		const prefix string = ",\"maxextended\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxExtended))
	}
	if in.MinBitrate != 0 {
		const prefix string = ",\"minbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MinBitrate))
	}
	if in.MaxBitrate != 0 {
		const prefix string = ",\"maxbitrate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxBitrate))
	}
	if len(in.Delivery) != 0 {
		const prefix string = ",\"delivery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Delivery {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v15))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionAd) != 0 {
		const prefix string = ",\"companionad\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v16, v17 := range in.CompanionAd {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson48f1e884EncodeGithubComAblegaoOpenrtb1(out, v17)
			}
			out.RawByte(']')
		}
	}
	if len(in.API) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v18, v19 := range in.API {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v19))
			}
			out.RawByte(']')
		}
	}
	if len(in.CompanionType) != 0 {
		const prefix string = ",\"companiontype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v20, v21 := range in.CompanionType {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v21))
			}
			out.RawByte(']')
		}
	}
	if in.MaxSequence != 0 {
		const prefix string = ",\"maxseq\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxSequence))
	}
	if in.Feed != 0 {
		const prefix string = ",\"feed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Feed))
	}
	if in.Stitched != 0 {
		const prefix string = ",\"stitched\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Stitched))
	}
	if in.NVol != 0 {
		const prefix string = ",\"nvol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NVol))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Audio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson48f1e884EncodeGithubComAblegaoOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Audio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson48f1e884EncodeGithubComAblegaoOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Audio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson48f1e884DecodeGithubComAblegaoOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Audio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson48f1e884DecodeGithubComAblegaoOpenrtb(l, v)
}
func easyjson48f1e884DecodeGithubComAblegaoOpenrtb1(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if out.Format == nil {
					if !in.IsDelim(']') {
						out.Format = make([]Format, 0, 1)
					} else {
						out.Format = []Format{}
					}
				} else {
					out.Format = (out.Format)[:0]
				}
				for !in.IsDelim(']') {
					var v22 Format
					easyjson48f1e884DecodeGithubComAblegaoOpenrtb2(in, &v22)
					out.Format = append(out.Format, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wmax":
			out.WMax = int(in.Int())
		case "hmax":
			out.HMax = int(in.Int())
		case "wmin":
			out.WMin = int(in.Int())
		case "hmin":
			out.HMin = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.BType = nil
			} else {
				in.Delim('[')
				if out.BType == nil {
					if !in.IsDelim(']') {
						out.BType = make([]int, 0, 8)
					} else {
						out.BType = []int{}
					}
				} else {
					out.BType = (out.BType)[:0]
				}
				for !in.IsDelim(']') {
					var v23 int
					v23 = int(in.Int())
					out.BType = append(out.BType, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]int, 0, 8)
					} else {
						out.BAttr = []int{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v24 int
					v24 = int(in.Int())
					out.BAttr = append(out.BAttr, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int(in.Int())
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Mimes = append(out.Mimes, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			out.TopFrame = int(in.Int())
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.ExpDir = nil
			} else {
				in.Delim('[')
				if out.ExpDir == nil {
					if !in.IsDelim(']') {
						out.ExpDir = make([]int, 0, 8)
					} else {
						out.ExpDir = []int{}
					}
				} else {
					out.ExpDir = (out.ExpDir)[:0]
				}
				for !in.IsDelim(']') {
					var v26 int
					v26 = int(in.Int())
					out.ExpDir = append(out.ExpDir, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.Api = nil
			} else {
				in.Delim('[')
				if out.Api == nil {
					if !in.IsDelim(']') {
						out.Api = make([]int, 0, 8)
					} else {
						out.Api = []int{}
					}
				} else {
					out.Api = (out.Api)[:0]
				}
				for !in.IsDelim(']') {
					var v27 int
					v27 = int(in.Int())
					out.Api = append(out.Api, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48f1e884EncodeGithubComAblegaoOpenrtb1(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if len(in.Format) != 0 {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v28, v29 := range in.Format {
				if v28 > 0 {
					out.RawByte(',')
				}
				easyjson48f1e884EncodeGithubComAblegaoOpenrtb2(out, v29)
			}
			out.RawByte(']')
		}
	}
	if in.WMax != 0 {
		const prefix string = ",\"wmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WMax))
	}
	if in.HMax != 0 {
		const prefix string = ",\"hmax\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HMax))
	}
	if in.WMin != 0 {
		const prefix string = ",\"wmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WMin))
	}
	if in.HMin != 0 {
		const prefix string = ",\"hmin\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.HMin))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if len(in.BType) != 0 {
		const prefix string = ",\"btype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v30, v31 := range in.BType {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAttr) != 0 {
		const prefix string = ",\"battr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v32, v33 := range in.BAttr {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		const prefix string = ",\"pos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Pos))
	}
	if len(in.Mimes) != 0 {
		const prefix string = ",\"mimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v34, v35 := range in.Mimes {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.String(string(v35))
			}
			out.RawByte(']')
		}
	}
	if in.TopFrame != 0 {
		const prefix string = ",\"topframe\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TopFrame))
	}
	if len(in.ExpDir) != 0 {
		const prefix string = ",\"expdir\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.ExpDir {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v37))
			}
			out.RawByte(']')
		}
	}
	if len(in.Api) != 0 {
		const prefix string = ",\"api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v38, v39 := range in.Api {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v39))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson48f1e884DecodeGithubComAblegaoOpenrtb2(in *jlexer.Lexer, out *Format) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson48f1e884EncodeGithubComAblegaoOpenrtb2(out *jwriter.Writer, in Format) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		const prefix string = ",\"w\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.W))
	}
	if in.H != 0 {
		const prefix string = ",\"h\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.H))
	}
	if len(in.Ext) != 0 {
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
